//Khai b√°o c√°c th∆∞ vi·ªán, ch√¢n k·∫øt n·ªëi v·ªõi ngo·∫°i vi
#include <Arduino.h>
#include <LiquidCrystal.h>
#include <Preferences.h>  // Thay th·∫ø NVSFlash.h b·∫±ng Preferences
#include <ctime>  // ƒê·ªÉ d√πng h√†m mktime()
#define BLYNK_PRINT Serial
//ƒê·ªãnh nghƒ©a ƒë·ªãa ch·ªâ, t√™n, m√£ k·∫øt n·ªëi v·ªõi app Blynk IoT
#define BLYNK_TEMPLATE_ID "TMPL6TGETSmgF"
#define BLYNK_TEMPLATE_NAME "watering quality testing"
#define BLYNK_AUTH_TOKEN "aAL7Ba4mxXeoyjMifkDAJSRqA8asqKRl"

// Khai b√°o th∆∞ vi·ªán wifi v√† blynk 
#include <WiFi.h>
#include <BlynkSimpleEsp32.h>

// Th√¥ng tin WiFi
char ssid[] = "30 PDG";
char pass[] = "bktech1017";

// char ssid[] = "Quang Hai T3";
// char pass[] = "19741975";
// Ch√¢n GPIO32
#define GPIO32_PIN 32 // Ch√¢n ƒëi·ªÅu khi·ªÉn m√°y b∆°m

// Khai b√°o ch√¢n k·∫øt n·ªëi LCD v·ªõi ESP32
const int RS = 33, EN = 25, D4 = 26, D5 = 27, D6 = 14, D7 = 13;

// Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng LCD
LiquidCrystal lcd(RS, EN, D4, D5, D6, D7);

//D√πng bi·∫øn to√†n c·ª•c cho c·∫£m bi·∫øn
int chattan_value;
float ph_value;

//++++++++++
// Khai b√°o ƒë·ªëi t∆∞·ª£ng Preferences
Preferences preferences;
float totalMilliLitres30Days = 0;   // T·ªïng l∆∞·ª£ng n∆∞·ªõc trong 30 ng√†y
int dayCounter = 0;                 // ƒê·∫øm s·ªë ng√†y
//‚úÖ_______________________________________________________________CAM BIEN LUU LUONG__________________________________________________________________
#define LED_BUILTIN 2
#define SENSOR 39

    long currentMillis = 0;
    long previousMillis = 0;
    int interval = 1000;
    boolean ledState = LOW;

    //H·ªá s·ªë hi·ªáu chu·∫©n c·∫£m 
    float calibrationFactor = 4.5;
    //Bi·∫øn ki·ªÉm so√°t l∆∞u  
    volatile byte pulseCount;
    byte pulseSec = 0;
    float flowRate;
    float flowMilliLitres;
    float totalMilliLitres;

    //Bi·∫øn tr·∫°ng th√°i n∆∞·ªõc ch·∫£y
    bool waterFlowing = false;

void IRAM_ATTR pulseCounter() {
  pulseCount++;
  waterFlowing = true;  // C√≥ xung nghƒ©a l√† n∆∞·ªõc ƒëang ch·∫£y
}

// H√†m t√≠nh to√°n l∆∞u l∆∞·ª£ng n∆∞·ªõc
float calculateFlowRate() {
    unsigned long currentMillis = millis();
    if (currentMillis - previousMillis > interval) {
        int pulseSec = pulseCount;  // L·∫•y s·ªë xung trong kho·∫£ng th·ªùi gian
        pulseCount = 0;  // Reset b·ªô ƒë·∫øm xung

        if (pulseSec == 0) {
            waterFlowing = false;
            return 0.0;
        }

        // T√≠nh to√°n l∆∞u l∆∞·ª£ng (L/min)
        flowRate = (1000.0 / (currentMillis - previousMillis)) * pulseSec;
        previousMillis = currentMillis;

        // T√≠nh t·ªïng l∆∞·ª£ng n∆∞·ªõc ƒë√£ ch·∫£y (mL)
        float flowMilliLitres = (flowRate / 60) * 1000;
        totalMilliLitres += flowMilliLitres/5;
        totalMilliLitres30Days += flowMilliLitres/5;
        return flowRate;
    }
    return flowRate;
}
// üìå H√†m l·∫•y ng√†y hi·ªán t·∫°i
String getCurrentDate() {
  time_t now = time(nullptr);
  struct tm* timeinfo = localtime(&now);
  char currentDate[20];
  strftime(currentDate, sizeof(currentDate), "%Y-%m-%d", timeinfo);
  return String(currentDate);
}

void readFromNVS() {
  preferences.begin("storage", false);  

  // ƒê·ªçc d·ªØ li·ªáu t·ª´ NVS
  String storedDate = preferences.getString("date", "");  
  totalMilliLitres = preferences.getFloat("value", 0);
  totalMilliLitres30Days = preferences.getFloat("value30", 0);
  dayCounter = preferences.getInt("dayCounter", 0);

  String currentDate = getCurrentDate();

  // üìå Chuy·ªÉn ng√†y th√†nh timestamp ƒë·ªÉ t√≠nh s·ªë ng√†y tr√¥i qua
  struct tm timeStored = {0}, timeNow = {0};

  sscanf(storedDate.c_str(), "%d-%d-%d", &timeStored.tm_year, &timeStored.tm_mon, &timeStored.tm_mday);
  sscanf(currentDate.c_str(), "%d-%d-%d", &timeNow.tm_year, &timeNow.tm_mon, &timeNow.tm_mday);
  
  timeStored.tm_year -= 1900;  // struct tm c·∫ßn t√≠nh t·ª´ nƒÉm 1900
  timeStored.tm_mon -= 1;      // struct tm t√≠nh th√°ng t·ª´ 0-11
  timeNow.tm_year -= 1900;
  timeNow.tm_mon -= 1;

  time_t t1 = mktime(&timeStored);
  time_t t2 = mktime(&timeNow);

  if (t1 != -1 && t2 != -1) {
    int daysPassed = (t2 - t1) / 86400;  // 86400s = 1 ng√†y
    if (daysPassed > 0) {
      totalMilliLitres = 0;

      dayCounter += daysPassed;  // üìå C·ªông d·ªìn ƒë√∫ng s·ªë ng√†y

      if (dayCounter >= 30) {
        totalMilliLitres30Days = 0;
        dayCounter = 0;
      }

      saveToNVS();
    }
  }

  preferences.end();  
}

// üìå L∆∞u d·ªØ li·ªáu v√†o NVS m·ªói khi c·∫≠p nh·∫≠t n∆∞·ªõc trong ng√†y
void saveToNVS() {
  preferences.begin("storage", false);
  
  String currentDate = getCurrentDate();
  preferences.putString("date", currentDate);
  preferences.putFloat("value", totalMilliLitres);    
  preferences.putFloat("value30", totalMilliLitres30Days);   
  preferences.putInt("dayCounter", dayCounter);

  preferences.end();  
}


// üìå G·ª≠i d·ªØ li·ªáu l√™n Blynk
void sendData() {
  Blynk.virtualWrite(V3, totalMilliLitres / 1000);  
  Blynk.virtualWrite(V4, totalMilliLitres30Days / 1000);

  Serial.print("Today: ");
  Serial.print(totalMilliLitres / 1000);
  Serial.print(" L | Total Days: ");
  Serial.print(dayCounter);
  Serial.print(" | Month Total: ");
  Serial.println(totalMilliLitres30Days / 1000);

  saveToNVS();  
}
//‚úÖ____________________________________________________________CAM BIEN NONG DO CHAT TAN______________________________________________________________
#define TdsSensorPin 34
#define VREF 3.3              // analog reference voltage(Volt) of the ADC
#define SCOUNT  30            // sum of sample point


int analogBuffer[SCOUNT];     // store the analog value in the array, read from ADC
int analogBufferTemp[SCOUNT];
int analogBufferIndex = 0;
int copyIndex = 0;

float averageVoltage = 0;
float tdsValue = 0;
float temperature = 25;       // current temperature for compensation

// median filtering algorithm
int getMedianNum(int bArray[], int iFilterLen){
  int bTab[iFilterLen];
  for (byte i = 0; i<iFilterLen; i++)
  bTab[i] = bArray[i];
  int i, j, bTemp;
  for (j = 0; j < iFilterLen - 1; j++) {
    for (i = 0; i < iFilterLen - j - 1; i++) {
      if (bTab[i] > bTab[i + 1]) {
        bTemp = bTab[i];
        bTab[i] = bTab[i + 1];
        bTab[i + 1] = bTemp;
      }
    }
  }
  if ((iFilterLen & 1) > 0){
    bTemp = bTab[(iFilterLen - 1) / 2];
  }
  else {
    bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;
  }
  return bTemp;
}
int chattan_calculation(){
  static unsigned long analogSampleTimepoint = millis();
  if(millis()-analogSampleTimepoint > 40U){     //every 40 milliseconds,read the analog value from the ADC
    analogSampleTimepoint = millis();
    analogBuffer[analogBufferIndex] = analogRead(TdsSensorPin);    //read the analog value and store into the buffer
    analogBufferIndex++;
    if(analogBufferIndex == SCOUNT){ 
      analogBufferIndex = 0;
    }
  }   
  
    for(copyIndex=0; copyIndex<SCOUNT; copyIndex++){
      analogBufferTemp[copyIndex] = analogBuffer[copyIndex];
      
      // read the analog value more stable by the median filtering algorithm, and convert to voltage value
      averageVoltage = getMedianNum(analogBufferTemp,SCOUNT) * (float)VREF / 4096.0;
      
      //temperature compensation formula: fFinalResult(25^C) = fFinalResult(current)/(1.0+0.02*(fTP-25.0)); 
      float compensationCoefficient = 1.0+0.02*(temperature-25.0);
      //temperature compensation
      float compensationVoltage=averageVoltage/compensationCoefficient;
      
      //convert voltage value to tds value
      tdsValue=(133.42*compensationVoltage*compensationVoltage*compensationVoltage - 255.86*compensationVoltage*compensationVoltage + 857.39*compensationVoltage)*0.5;
      
      // Serial.print("voltage:");
      // Serial.print(averageVoltage,2);
      // Serial.print("V   ");
      // Serial.print("TDS Value:");
      // Serial.print(tdsValue,0);
      // Serial.println("ppm");
    }

    return tdsValue;
}
int chattan_getValue(){
  int chattan = chattan_calculation();
  if(chattan >= 20 && chattan <= 2419){
  return chattan;
  }
  else{
    return 0;
  }
}
//‚úÖ____________________________________________________________________CAM BIEN DO PH_________________________________________________________________
#define SensorPin 35        // Ch√¢n Analog tr√™n ESP32
#define Offset 3.0          // Hi·ªáu ch·ªânh gi√° tr·ªã pH
#define SamplingInterval 20  // Th·ªùi gian l·∫•y m·∫´u (ms)
#define ArrayLength 40       // S·ªë l·∫ßn l·∫•y m·∫´u trung b√¨nh

int pHArray[ArrayLength]; 
int pHArrayIndex = 0;

float ph_calculation() {
    static unsigned long samplingTime = millis();
    static float pHValue, voltage;

    if (millis() - samplingTime > SamplingInterval) {
        pHArray[pHArrayIndex++] = analogRead(SensorPin);
        if (pHArrayIndex == ArrayLength) pHArrayIndex = 0;

        voltage = averageArray(pHArray, ArrayLength) * (3.3 / 4095.0);
        pHValue = 7.0 + ((2.5 - voltage) * Offset);  // Hi·ªáu ch·ªânh theo kho·∫£ng 2.5V

        samplingTime = millis();
    }

    // Serial.print("Voltage: ");
    // Serial.print(voltage, 3);
    // Serial.print(" V | pH value: ");
    // Serial.println(pHValue, 2);

    return pHValue;
}

float ph_getValue() {
    float ph = ph_calculation();
    if (ph >= 0 && ph <= 14) {  // ƒêi·ªÅu ki·ªán h·ª£p l·ªá c·ªßa pH
        return ph;
    }
    return 0;  // Gi√° tr·ªã kh√¥ng h·ª£p l·ªá
}

double averageArray(int* arr, int number) {
    if (number <= 0) return 0;

    int min = arr[0], max = arr[0];
    long sum = 0;

    for (int i = 0; i < number; i++) {
        if (arr[i] < min) min = arr[i];
        if (arr[i] > max) max = arr[i];
        sum += arr[i];
    }

    sum -= (min + max);  // Lo·∫°i b·ªè gi√° tr·ªã l·ªõn nh·∫•t & nh·ªè nh·∫•t
    return (double)sum / (number - 2);
}

//‚úÖ___________________________________________________________________SET---UP_______________________________________________________________________
//S·ª≠ d·ª•ng freeRTOS ƒë·ªÉ ch·∫°y wifi v√† x·ª≠ l√≠ c√°c ngo·∫°i vi kh√°c m·ªôt c√°ch song song
void setup() {
  //Kh·ªüi t·∫°o baud rate
  Serial.begin(115200);

  //DEBUG
  esp_reset_reason_t reason = esp_reset_reason();
    Serial.print("ESP Reset Reason: ");
    Serial.println(reason);  // In ra l√Ω do reset


  //C√°c khai b√°o cho c√°c ngo·∫°i vi kh√°c______________________
  pinMode(LED_BUILTIN, OUTPUT);
  pinMode(SENSOR, INPUT_PULLUP);

  pulseCount = 0;
  flowRate = 0.0;
  flowMilliLitres = 0;
  totalMilliLitres = 0;
  previousMillis = 0;
  //Thi·∫øt l·∫≠p ng·∫Øt ngo√†i tr√™n ch√¢n c·∫£m bi·∫øn
  attachInterrupt(digitalPinToInterrupt(SENSOR), pulseCounter, FALLING);
  pinMode(TdsSensorPin,INPUT);
  //KH·ªûI T·∫†O LCD 16x2
    lcd.begin(16, 2);
  // K·∫æT N·ªêI V·ªöI WIFI V√Ä BLYNK APP
    WiFi.begin(ssid, pass);

    Serial.print("ƒêang k·∫øt n·ªëi WiFi...");

    //LCD hi·ªÉn th·ªã tr·∫°ng th√°i k·∫øt n·ªëi v·ªõi 
    lcd.setCursor(0,0);
    lcd.print("Connecting......");

    int retry = 0;
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);

        Serial.print(".");
        retry++;
       if (retry > 20) {  

        Serial.println("\nKh√¥ng th·ªÉ k·∫øt n·ªëi WiFi! Resetting...");
        ESP.restart();  // Reset l·∫°i ESP32
      }
    }
    //LCD 
    Serial.println("\nWiFi ƒë√£ k·∫øt n·ªëi!");
    Serial.print("IP: ");
    Serial.println(WiFi.localIP());

    lcd.setCursor(0,0);
    lcd.print("Wifi connected");
    lcd.setCursor(0,1);
    lcd.print("Initializing....");
    // K·∫øt n·ªëi Blynk
    Blynk.config(BLYNK_AUTH_TOKEN);
    Blynk.connect();

    //B∆†M N∆Ø·ªöC...........
    // Thi·∫øt l·∫≠p ch√¢n GPIO32 l√†m ƒë·∫ßu ra
    pinMode(GPIO32_PIN, OUTPUT);
    digitalWrite(GPIO32_PIN, LOW);  // ƒê·∫£m b·∫£o GPIO32 t·∫Øt khi kh·ªüi ƒë·ªông


    configTime(7 * 3600, 0, "pool.ntp.org");  // ƒê·ªìng b·ªô th·ªùi gian
    delay(2000);  // ƒê·ª£i th·ªùi gian c·∫≠p nh·∫≠t

    readFromNVS();  // ƒê·ªçc d·ªØ li·ªáu ƒë√£ l∆∞u trong NVS
    // G·ª≠i d·ªØ li·ªáu ban ƒë·∫ßu
    sendData();
  //T·∫°o c√°c task_________________________________
   // T·∫°o Task
    //Task thu d·ªØ li·ªáu c·∫£m bi·∫øn
    xTaskCreatePinnedToCore(CollectData, "CollectData",       4096, NULL, 5, NULL, 1);
    //Task hi·ªÉn th·ªã LCD
    xTaskCreatePinnedToCore(Task1, "Task1",                   4096, NULL, 2, NULL, 0);
    //Task nh·∫≠n bi·∫øt c·∫£m bi·∫øn l∆∞u l∆∞·ª£ng
    xTaskCreatePinnedToCore(FlowSensorTask, "FlowSensorTask", 4096, NULL, 1, NULL, 1);
    //Task g·ª≠i d·ªØ li·ªáu l√™n BLYNK
    xTaskCreatePinnedToCore(SensorTask, "SensorTask",         4096, NULL, 3, NULL, 0);
    //Task ch·∫°y c√°c l·ªánh c·ªßa BLYNK
    xTaskCreatePinnedToCore(BlynkTask,    "BlynkTask",        4096, NULL, 4, NULL, 0);
}

//_________________________________________H√ÄM CH·∫†Y C√ÅC TASK_________________________________
int isDirty = 0;
//‚úÖ________________________________________________________________________________________________________________________COLLECT_Data_Task
void CollectData(void *pvParameters){
  while(1){
    // ƒê·ªçc d·ªØ li·ªáu c·∫£m bi·∫øn
        chattan_value = chattan_getValue();

        ph_value = ph_getValue();
        
        // Ki·ªÉm tra ch·∫•t l∆∞·ª£ng n∆∞·ªõc
        isDirty = (chattan_value > 1000 || ph_value < 6 || ph_value > 8.5);  // Ki·ªÉm tra ch·∫•t l∆∞·ª£ng n∆∞·ªõc
        digitalWrite(GPIO32_PIN, isDirty ? HIGH : LOW); 
       // ƒêi·ªÅu khi·ªÉn b∆°m th·ª±c t·∫ø
    vTaskDelay(pdMS_TO_TICKS(100));
  }
}
//‚úÖ________________________________________________________________________________________________________________________LCD_DISPLAY

void Task1(void *pvParameters) {
    while (1) {
        // In gi√° tr·ªã c·∫£m bi·∫øn ra Serial Monitor ƒë·ªÉ debug
        // Serial.print("[DEBUG] Ch·∫•t tan: ");
        // Serial.print(chattan);
        // Serial.print(" ppm  |  pH: ");
        // Serial.println(ph);

        // Ki·ªÉm tra n·∫øu c·∫£m bi·∫øn tr·∫£ v·ªÅ -1 (l·ªói)
        // if (chattan == -1 || ph == -1) {
        //     Serial.println("[ERROR] C·∫£m bi·∫øn l·ªói, ki·ªÉm tra l·∫°i k·∫øt n·ªëi!");
        // }
        // Hi·ªÉn th·ªã d·ªØ li·ªáu l√™n LCD
        lcd.clear();
        if (isDirty) {
            lcd.setCursor(0, 0);
            lcd.print("Water Dirty");
            lcd.setCursor(0, 1);
            lcd.print("Draining Water");
        } else {
            lcd.setCursor(0, 0);
            lcd.print("Water is Stable");
            lcd.setCursor(0, 1);
            lcd.print("Day:");
            lcd.print(dayCounter);
            lcd.print("/30");
        }
        vTaskDelay(pdMS_TO_TICKS(3000));

        // Hi·ªÉn th·ªã th√¥ng s·ªë c·∫£m bi·∫øn
        lcd.clear();
        if (chattan_value == -1) {
            lcd.setCursor(0, 0);
            lcd.print("Sensor Error...");
        } else {
            lcd.setCursor(0, 0);
            lcd.print("Solute: ");
            lcd.print(chattan_value);
            lcd.print("ppm");
        }

        if (ph_value == -1) {
            lcd.setCursor(0, 1);
            lcd.print("Sensor Error...");
        } else {
            lcd.setCursor(0, 1);
            lcd.print("pH: ");
            lcd.print(ph_value);
        }
        vTaskDelay(pdMS_TO_TICKS(3000));

        // Th√™m delay ƒë·ªÉ tr√°nh v√≤ng l·∫∑p qu√° nhanh
        vTaskDelay(pdMS_TO_TICKS(100));
    }
}

//________________________________________________________________________________________________________C·∫¢M BI·∫æN L∆ØU L∆Ø·ª¢NG
// ‚úÖTask x·ª≠ l√Ω l∆∞u l∆∞·ª£ng n∆∞·ªõc
// Task ƒë·ªçc c·∫£m bi·∫øn l∆∞u l∆∞·ª£ng
void FlowSensorTask(void *pvParameters) {
    while (1) {
        if (!waterFlowing) {
            vTaskDelay(pdMS_TO_TICKS(100));
            continue;
        }

        // G·ªçi h√†m t√≠nh to√°n l∆∞u l∆∞·ª£ng
        float currentFlowRate = calculateFlowRate();

        // Serial.print("L∆∞u l∆∞·ª£ng: ");
        // Serial.print(currentFlowRate);
        // Serial.println(" L/min");

        vTaskDelay(pdMS_TO_TICKS(10));
    }
}

//_______________________________________________________________________________________________________________________BLYNK
  //‚úÖ Task g·ª≠i d·ªØ li·ªáu l√™n Blynk
void SensorTask(void *pvParameters) {
    while (1) {

        Blynk.virtualWrite(V1, chattan_value); // Ch·∫•t tan ppm
        Blynk.virtualWrite(V2, ph_value);      // ƒê·ªô pH
        Blynk.virtualWrite(V3, totalMilliLitres/1000);
        Blynk.virtualWrite(V4, totalMilliLitres30Days / 1000);
        sendData();
        float flow = calculateFlowRate(); // L·∫•y gi√° tr·ªã t·ª´ h√†m t√≠nh to√°n
        Blynk.virtualWrite(V0, flow);

        // Serial.print("BLYNK     Chattan: ");
        // Serial.print(chattan);
        // Serial.print("ppm     pH: ");
        // Serial.println(ph);

        //Serial.println("ƒê√£ g·ª≠i d·ªØ li·ªáu l√™n Blynk...");
        
        // Ch·ªù 5 gi√¢y tr∆∞·ªõc khi g·ª≠i ti·∫øp
        vTaskDelay(pdMS_TO_TICKS(100));
    }
}
TaskHandle_t BlynkTaskHandle = NULL;

//‚úÖ H√†m task Blynk
void BlynkTask(void *pvParameters) {
  while (true) {
    Blynk.run();  // G·ªçi Blynk.run() li√™n t·ª•c
    vTaskDelay(10 / portTICK_PERIOD_MS);  // Delay nh·ªè ƒë·ªÉ tr√°nh chi·∫øm qu√° nhi·ªÅu CPU
  }
}

//__________________________________________________________________L--O--O--P_______________________________________________________________________
// ‚úÖ Loop kh√¥ng l√†m g√¨ c·∫£
void loop() {
    // Kh√¥ng c·∫ßn l√†m g√¨ v√¨ m·ªçi th·ª© ƒë√£ ch·∫°y trong task
}

